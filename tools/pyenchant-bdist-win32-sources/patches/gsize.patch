Patch from https://github.com/avionic-design/pbs-stage2/blob/master/packages/libs/enchant/patches/gsize.patch
--- enchant-1.6.0/src/ispell/ispell_checker.cpp	2010-04-01 16:53:37.000000000 -0400
+++ enchant-1.6.0/src/ispell/ispell_checker.cpp	2016-02-01 00:23:00.000000000 -0500
@@ -162,7 +162,7 @@
 	else
 		{
 			/* convert to 8bit string and null terminate */
-			size_t len_in, len_out, result;
+			gsize len_in, len_out, result;
 			// the 8bit encodings use precomposed forms
 			char *normalizedWord = g_utf8_normalize (utf8Word, length, G_NORMALIZE_NFC);
 			char *In = normalizedWord;
@@ -172,7 +172,7 @@
 			len_out = sizeof( szWord ) - 1;
 			result = g_iconv(m_translate_in, &In, &len_in, &Out, &len_out);
 			g_free(normalizedWord);
-			if ((size_t)-1 == result)
+			if ((gsize)-1 == result)
 				return false;
 			*Out = '\0';
 		}
@@ -210,7 +210,7 @@
 		{
 			/* convert to 8bit string and null terminate */
 			
-			size_t len_in, len_out, result;
+			gsize len_in, len_out, result;
 			// the 8bit encodings use precomposed forms
 			char *normalizedWord = g_utf8_normalize (utf8Word, length, G_NORMALIZE_NFC);
 			char *In = normalizedWord;
@@ -219,7 +219,7 @@
 			len_out = sizeof( word8 ) - 1;
 			result = g_iconv(m_translate_in, &In, &len_in, &Out, &len_out);
 			g_free(normalizedWord);
-			if ((size_t)-1 == result)
+			if ((gsize)-1 == result)
 				return NULL;
 			*Out = '\0';
 		}
@@ -252,13 +252,13 @@
 					{
 						/* convert to 32bit string and null terminate */
 						
-						size_t len_in, len_out;
+						gsize len_in, len_out;
 						char *In = m_possibilities[c];
 						char *Out = reinterpret_cast<char *>(utf8Sugg);
 						
 						len_in = l;
 						len_out = INPUTWORDLEN + MAXAFFIXLEN;
-						if ((size_t)-1 == g_iconv(m_translate_out, &In, &len_in, &Out, &len_out)) {
+						if ((gsize)-1 == g_iconv(m_translate_out, &In, &len_in, &Out, &len_out)) {
 							*out_n_suggestions = c;
 							return sugg_arr;
 						}
--- enchant-1.6.0/src/myspell/myspell_checker.cpp	2016-02-01 00:20:26.000000000 -0500
+++ enchant-1.6.0/src/myspell/myspell_checker.cpp	2016-02-01 00:28:01.000000000 -0500
@@ -159,11 +159,11 @@
 	char *in = normalizedWord;
 	char word8[MAXWORDLEN + 1];
 	char *out = word8;
-	size_t len_in = strlen(in);
-	size_t len_out = sizeof( word8 ) - 1;
-	size_t result = g_iconv(m_translate_in, &in, &len_in, &out, &len_out);
+	gsize len_in = strlen(in);
+	gsize len_out = sizeof( word8 ) - 1;
+	gsize result = g_iconv(m_translate_in, &in, &len_in, &out, &len_out);
 	g_free(normalizedWord);
-	if ((size_t)-1 == result)
+	if ((gsize)-1 == result)
 		return false;
 	*out = '\0';
 	if (myspell->spell(word8))
@@ -185,11 +185,11 @@
 	char *in = normalizedWord;
 	char word8[MAXWORDLEN + 1];
 	char *out = word8;
-	size_t len_in = strlen(in);
-	size_t len_out = sizeof(word8) - 1;
-	size_t result = g_iconv(m_translate_in, &in, &len_in, &out, &len_out);
+	gsize len_in = strlen(in);
+	gsize len_out = sizeof(word8) - 1;
+	gsize result = g_iconv(m_translate_in, &in, &len_in, &out, &len_out);
 	g_free(normalizedWord);
-	if ((size_t)-1 == result)
+	if ((gsize)-1 == result)
 		return NULL;
 
 	*out = '\0';
@@ -203,7 +203,7 @@
 			len_out = MAXWORDLEN;
 			char *word = g_new0(char, len_out + 1);
 			out = reinterpret_cast<char *>(word);
-			if ((size_t)-1 == g_iconv(m_translate_out, &in, &len_in, &out, &len_out)) {
+			if ((gsize)-1 == g_iconv(m_translate_out, &in, &len_in, &out, &len_out)) {
 				for (size_t j = i; j < *nsug; j++)
 					free(sugMS[j]);
 				free(sugMS);
