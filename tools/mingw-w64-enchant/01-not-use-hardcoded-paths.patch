diff -Naur enchant-1.6.0-orig/src/aspell/aspell_provider.c enchant-1.6.0-rel/src/aspell/aspell_provider.c
--- enchant-1.6.0-orig/src/aspell/aspell_provider.c	2010-04-01 23:53:37.000000000 +0300
+++ enchant-1.6.0-rel/src/aspell/aspell_provider.c	2014-12-14 23:51:20.883200000 +0300
@@ -405,6 +405,7 @@
     HMODULE aspell_module = NULL;
     char* szModule;
 
+#ifndef __MINGW32__
     /* first try load from registry path */
    	szModule = enchant_get_registry_value ("Aspell", "Module");
     if(szModule)
@@ -426,6 +427,7 @@
                     g_free(wszDirectory);
                 }
         }
+#endif
 
     if (aspell_module == NULL)
         {
diff -Naur enchant-1.6.0-orig/src/enchant.c enchant-1.6.0-rel/src/enchant.c
--- enchant-1.6.0-orig/src/enchant.c	2014-12-12 16:54:56.911400000 +0300
+++ enchant-1.6.0-rel/src/enchant.c	2014-12-14 23:56:15.364400000 +0300
@@ -143,11 +143,13 @@
 {
 	GSList *dirs = NULL;
 	const char* home_dir;
+#ifndef __MINGW32__
 	char *tmp;
 
 	tmp = enchant_get_registry_value_ex (1, "Config", "Home_Dir");
 	if (tmp)
 		dirs = enchant_slist_append_unique_path (dirs, tmp);
+#endif
 
 	home_dir = g_get_home_dir ();
 	if (home_dir)
@@ -210,6 +212,7 @@
 	char * module_dir = NULL;
 	char * prefix = NULL;
 
+#ifndef __MINGW32__
 	{
 		char* user_module_dir;
 		
@@ -217,6 +220,7 @@
 		if (user_module_dir)
 			module_dirs = enchant_slist_append_unique_path (module_dirs, user_module_dir);
 	}
+#endif
 
 #ifdef XP_TARGET_COCOA
 	module_dirs = enchant_slist_append_unique_path (module_dirs, g_strdup ([[EnchantResourceProvider instance] moduleFolder]));
@@ -238,7 +242,7 @@
 	if (module_dir)
 		module_dirs = enchant_slist_append_unique_path (module_dirs, module_dir);
 
-#if defined(ENCHANT_GLOBAL_MODULE_DIR)
+#if defined(ENCHANT_GLOBAL_MODULE_DIR) && !defined(__MINGW32__)
 	module_dirs = enchant_slist_append_unique_path (module_dirs, g_strdup (ENCHANT_GLOBAL_MODULE_DIR));
 #else
 	/* Dynamically locate library and search for modules relative to it. */
@@ -273,10 +277,12 @@
 	conf_dirs = enchant_slist_append_unique_path (conf_dirs, g_strdup ([[EnchantResourceProvider instance] configFolder]));
 #endif
 
+#ifndef __MINGW32__
 	/* Look for explicitly set registry values */
 	ordering_dir = enchant_get_registry_value_ex (0, "Config", "Data_Dir");
 	if (ordering_dir)
 		conf_dirs = enchant_slist_append_unique_path (conf_dirs, ordering_dir);
+#endif
 
 	/* Dynamically locate library and search for files relative to it. */
 	prefix = enchant_get_prefix_dir();
@@ -287,7 +293,7 @@
 			conf_dirs = enchant_slist_append_unique_path (conf_dirs, ordering_dir);
 		}
 
-#if defined(ENCHANT_GLOBAL_ORDERING)
+#if defined(ENCHANT_GLOBAL_ORDERING) && !defined(__MINGW32__)
 	conf_dirs = enchant_slist_append_unique_path (conf_dirs, g_strdup (ENCHANT_GLOBAL_ORDERING));
 #endif
 
@@ -346,13 +352,17 @@
 enchant_get_user_config_dirs (void)
 {
 	GSList *dirs;
+#ifndef __MINGW32__
 	char* user_config;
+#endif
 
 	dirs = enchant_get_user_dirs();
 
+#ifndef __MINGW32__
 	user_config = enchant_get_registry_value_ex (1, "Config", "Data_Dir");
 	if (user_config)
 		dirs = enchant_slist_prepend_unique_path (dirs, user_config);
+#endif
 
 	return dirs;
 }
@@ -2271,7 +2281,7 @@
 	}
 #endif
 
-#if defined(ENCHANT_PREFIX_DIR)
+#if defined(ENCHANT_PREFIX_DIR) && !defined(__MINGW32__)
 	if (!prefix) {
 		prefix = g_strdup (ENCHANT_PREFIX_DIR);
 	}
diff -Naur enchant-1.6.0-orig/src/ispell/ispell_checker.cpp enchant-1.6.0-rel/src/ispell/ispell_checker.cpp
--- enchant-1.6.0-orig/src/ispell/ispell_checker.cpp	2010-04-01 23:53:37.000000000 +0300
+++ enchant-1.6.0-rel/src/ispell/ispell_checker.cpp	2014-12-14 23:58:50.986000000 +0300
@@ -309,10 +309,12 @@
 #ifndef XP_TARGET_COCOA
 	char * ispell_prefix = NULL;
 
+#ifndef __MINGW32__
 	/* Look for explicitly set registry values */
 	ispell_prefix = enchant_get_registry_value ("Ispell", "Data_Dir");
 	if (ispell_prefix)
 		dirs = g_slist_append (dirs, ispell_prefix);
+#endif
 
 	/* Dynamically locate library and search for modules relative to it. */
 	char * enchant_prefix = enchant_get_prefix_dir();
@@ -324,7 +326,7 @@
 		}
 #endif
 
-#ifdef ENCHANT_ISPELL_DICT_DIR
+#if defined(ENCHANT_ISPELL_DICT_DIR) && !defined(__MINGW32__)
 	dirs = g_slist_append (dirs, g_strdup (ENCHANT_ISPELL_DICT_DIR));
 #endif
 
diff -Naur enchant-1.6.0-orig/src/myspell/myspell_checker.cpp enchant-1.6.0-rel/src/myspell/myspell_checker.cpp
--- enchant-1.6.0-orig/src/myspell/myspell_checker.cpp	2010-04-01 23:53:37.000000000 +0300
+++ enchant-1.6.0-rel/src/myspell/myspell_checker.cpp	2014-12-14 23:59:57.301600000 +0300
@@ -257,10 +257,12 @@
 #ifndef XP_TARGET_COCOA
 	char * myspell_prefix = NULL;
 
+#ifndef __MINGW32__
 	/* Look for explicitly set registry values */
 	myspell_prefix = enchant_get_registry_value ("Myspell", "Data_Dir");
 	if (myspell_prefix)
 		dirs = g_slist_append (dirs, myspell_prefix);
+#endif
 
 	/* Dynamically locate library and search for modules relative to it. */
 	char * enchant_prefix = enchant_get_prefix_dir();
@@ -272,7 +274,7 @@
 		}
 #endif
 
-#ifdef ENCHANT_MYSPELL_DICT_DIR
+#if defined(ENCHANT_MYSPELL_DICT_DIR) && !defined(__MINGW32__)
 	dirs = g_slist_append (dirs, g_strdup (ENCHANT_MYSPELL_DICT_DIR));
 #endif
 
diff -Naur enchant-1.6.0-orig/src/uspell/uspell_provider.cpp enchant-1.6.0-rel/src/uspell/uspell_provider.cpp
--- enchant-1.6.0-orig/src/uspell/uspell_provider.cpp	2010-04-01 23:53:37.000000000 +0300
+++ enchant-1.6.0-rel/src/uspell/uspell_provider.cpp	2014-12-15 00:01:43.625600000 +0300
@@ -85,10 +85,12 @@
 #ifndef XP_TARGET_COCOA
 	char * uspell_prefix = NULL;
 
+#ifndef __MINGW32__
 	/* Look for explicitly set registry values */
 	uspell_prefix = enchant_get_registry_value ("Uspell", "Data_Dir");
 	if (uspell_prefix)
 		dirs = g_slist_append (dirs, uspell_prefix);
+#endif
 
 	/* Dynamically locate library and search for modules relative to it. */
 	char * enchant_prefix = enchant_get_prefix_dir();
@@ -100,7 +102,7 @@
 		}
 #endif
 
-#ifdef ENCHANT_USPELL_DICT_DIR
+#if defined(ENCHANT_USPELL_DICT_DIR) && !defined(__MINGW32__)
 	dirs = g_slist_append (dirs, g_strdup (ENCHANT_USPELL_DICT_DIR));
 #endif
 
